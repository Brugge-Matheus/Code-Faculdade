1. Validação de Entrada do Usuário:
A função validarPalpite verifica se a entrada do usuário é um número válido dentro do intervalo permitido. Ela percorre cada caractere da entrada para garantir que todos sejam dígitos ou um caractere de nova linha.

int validarPalpite(char *entrada, Intervalo intervalo) {
    for (int i = 0; entrada[i] != '\0'; i++) {
        if (!isdigit(entrada[i]) && entrada[i] != '\n') {
            printf("Por favor, insira um número válido.\n");
            return 0;
        }
    }
    int palpite = atoi(entrada);
    if (palpite < intervalo.min || palpite > intervalo.max) {
        printf("Por favor, insira um número dentro do intervalo fornecido.\n");
        return 0;
    }
    return 1;
}


2. Limite de Tentativas
O número máximo de tentativas é definido no struct Intervalo. A contagem de tentativas é incrementada em cada tentativa e comparada com intervalo.max_tentativas.

while (tentativas < intervalo.max_tentativas) {
    printf("Tentativa %d de %d. Adivinhe o número secreto (entre %d e %d): ", tentativas + 1, intervalo.max_tentativas, intervalo.min, intervalo.max);
    // ... código de leitura e validação ...
    tentativas++;
}

if (tentativas == intervalo.max_tentativas) {
    printf("Você excedeu o limite de tentativas. O número secreto era %d.\n", numeroSecreto);
}


3. Modularização do Código
O código é dividido em funções modulares como obterIntervaloDificuldade, gerarNumeroSecreto, validarPalpite, imprimirMensagem, exibirInstrucoes e jogarJogo.

Intervalo obterIntervaloDificuldade(int nivel) {
    codigo da implementação...
}

int gerarNumeroSecreto(int min, int max, int ultimoNumero) {
    codigo da implementação...
}

int validarPalpite(char *entrada, Intervalo intervalo) {
    codigo da implementação...
}


4. Utilização de Enumerações
A enumeração EstadoJogo é usada para representar os diferentes estados do jogo (JOGANDO, GANHOU, PERDEU).

typedef enum {
    JOGANDO,
    GANHOU,
    PERDEU
} EstadoJogo;


5. Implementação de Pontuação
A pontuação é calculada com base no número de tentativas usadas. Quanto menos tentativas, maior a pontuação.

if (palpite == numeroSecreto) {
    int pontuacao = PONTUACAO_MAXIMA / (tentativas + 1);
    printf("Parabéns! Você acertou o número secreto em %d tentativa(s). Sua pontuação é: %d.\n", tentativas + 1, pontuacao);
    return GANHOU;
}


6. Resolução de Problemas de Repetição de Números Aleatórios
A função gerarNumeroSecreto evita gerar o mesmo número secreto em jogadas subsequentes.

int gerarNumeroSecreto(int min, int max, int ultimoNumero) {
    int novoNumero;
    do {
        novoNumero = rand() % (max - min + 1) + min;
    } while (novoNumero == ultimoNumero);
    return novoNumero;
}


7. Adição de Níveis de Dificuldade
A função obterIntervaloDificuldade define diferentes intervalos e limites de tentativas com base no nível de dificuldade escolhido pelo usuário.

Intervalo obterIntervaloDificuldade(int nivel) {
    Intervalo intervalo;
    switch (nivel) {
        case 1: // Fácil
            intervalo.min = 1;
            intervalo.max = 50;
            intervalo.max_tentativas = 15;
            break;
        case 2: // Médio
            intervalo.min = 1;
            intervalo.max = 100;
            intervalo.max_tentativas = 10;
            break;
        case 3: // Difícil
            intervalo.min = 1;
            intervalo.max = 200;
            intervalo.max_tentativas = 5;
            break;
        default:
            intervalo.min = 1;
            intervalo.max = 100;
            intervalo.max_tentativas = 10;
            break;
    }
    return intervalo;
}


8. Tratamento de Erros de Entrada/Saída
A entrada do usuário é tratada com cuidado, incluindo verificações após a leitura com scanf e fgets.

if (scanf("%d", &nivel) != 1) {
    printf("Erro de entrada. Certifique-se de digitar um número.\n");
    return PERDEU;
}
getchar();  // Limpar o buffer de entrada

if (fgets(entrada, sizeof(entrada), stdin) == NULL) {
    printf("Erro de entrada. Não foi possível ler a entrada.\n");
    return PERDEU;
}


9. Implementação de um Menu Interativo
Um menu interativo permite ao jogador escolher entre iniciar um novo jogo, ver as instruções ou sair do jogo.

do {
    printf("\n=== Menu ===\n");
    printf("1. Iniciar Novo Jogo\n");
    printf("2. Ver Instruções\n");
    printf("3. Sair\n");
    printf("Escolha uma opção: ");

    if (scanf("%d", &opcao) != 1) {
        printf("Erro de entrada. Certifique-se de digitar um número.\n");
        return 1;
    }
    getchar();  // Limpar o buffer de entrada

    switch (opcao) {
        case 1:
            estado = jogarJogo();
            if (estado == PERDEU) {
                printf("Você perdeu! Tente novamente.\n");
            }
            break;
        case 2:
            exibirInstrucoes();
            break;
        case 3:
            printf("Saindo do jogo...\n");
            break;
        default:
            printf("Opção inválida. Por favor, escolha uma opção válida.\n");
            break;
    }
} while (opcao != 3);


10. Otimização de Desempenho
Foi feita reutilização de código e modularização, o gerenciamento de memória de forma eficiente usando variaveis locais e evitando a repetição de números aleatórios

int gerarNumeroSecreto(int min, int max, int ultimoNumero) {
    int novoNumero;
    do {
        novoNumero = rand() % (max - min + 1) + min;
    } while (novoNumero == ultimoNumero);
    return novoNumero;
}